name: Release & Deploy

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.3.0)'
        required: true
        type: string

env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: '9.1.4'

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      should_release: ${{ steps.should_release.outputs.result }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag or input
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Detected version: ${VERSION}"

      - name: Validate version format
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid version format. Expected: x.y.z"
            exit 1
          fi

      - name: Check if should release
        id: should_release
        run: |
          echo "result=true" >> $GITHUB_OUTPUT

  build-and-test:
    name: Build and Test for Release
    runs-on: ubuntu-latest
    needs: validate-release
    if: needs.validate-release.outputs.should_release == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm exec eslint "**/*.{ts,js}" --ignore-path .gitignore

      - name: Check formatting
        run: pnpm exec prettier --check .

      - name: Type check
        run: pnpm exec tsc --noEmit

      - name: Build project
        run: pnpm run build

      - name: Verify version consistency
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION="${{ needs.validate-release.outputs.version }}"
          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "Error: package.json version ($PACKAGE_VERSION) doesn't match tag version ($TAG_VERSION)"
            exit 1
          fi
          echo "‚úÖ Version consistency verified: $PACKAGE_VERSION"

      - name: Pack package
        run: pnpm pack

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-package
          path: |
            *.tgz
            dist/
          retention-days: 30

  publish-github:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test]
    if: needs.validate-release.outputs.should_release == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@automations-project'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm run build

      - name: Configure npm for GitHub Packages
        run: |
          echo "@automations-project:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}" >> .npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update package name for GitHub Packages
        run: |
          # Create a backup of original package.json
          cp package.json package.json.backup
          # Update package name for GitHub Packages
          node -e "
            const pkg = require('./package.json');
            pkg.name = '@automations-project/n8n-nodes-scrappey';
            require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "

      - name: Publish to GitHub Packages
        run: pnpm publish --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Restore original package name
        run: mv package.json.backup package.json

  publish-npm:
    name: Publish to NPM Registry
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-test]
    if: needs.validate-release.outputs.should_release == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm run build

      - name: Publish to NPM
        run: pnpm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  notify:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [validate-release, publish-github, publish-npm]
    if: always() && needs.validate-release.outputs.should_release == 'true'
    steps:
      - name: Success notification
        if: needs.publish-github.result == 'success' && needs.publish-npm.result == 'success'
        run: |
          echo "üéâ Successfully published v${{ needs.validate-release.outputs.version }}"
          echo "üì¶ Package published to GitHub Packages"
          echo "üì¶ Package published to npm.js"
          echo "üè∑Ô∏è GitHub release created by auto-version workflow"

      - name: Partial success notification
        if: (needs.publish-github.result == 'success' && needs.publish-npm.result != 'success') || (needs.publish-github.result != 'success' && needs.publish-npm.result == 'success')
        run: |
          echo "‚ö†Ô∏è Partial success for v${{ needs.validate-release.outputs.version }}"
          echo "GitHub Packages: ${{ needs.publish-github.result }}"
          echo "npm.js: ${{ needs.publish-npm.result }}"

      - name: Failure notification
        if: needs.publish-github.result == 'failure' && needs.publish-npm.result == 'failure'
        run: |
          echo "‚ùå Publishing failed for v${{ needs.validate-release.outputs.version }}"
          echo "Both GitHub Packages and npm.js publishing failed"
          exit 1

name: Release & Deploy

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: false
        default: 'auto'
        type: choice
        options:
          - 'auto'
          - 'patch'
          - 'minor'
          - 'major'
      force_version:
        description: 'Force specific version (e.g., 0.3.5) - overrides version_type'
        required: false
        type: string

env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: '9.1.4'

jobs:
  detect-and-bump-version:
    name: Detect and Bump Version
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.determine_version.outputs.new_version }}
      should_release: ${{ steps.determine_version.outputs.should_release }}
      version_changed: ${{ steps.determine_version.outputs.version_changed }}
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Get current package.json version
        id: package_version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "version=${PACKAGE_VERSION}" >> $GITHUB_OUTPUT
          echo "üì¶ Current package.json version: ${PACKAGE_VERSION}"

      - name: Get latest published versions
        id: published_versions
        run: |
          # Get latest version from npm
          NPM_VERSION=""
          if npm view @nskha/n8n-nodes-scrappey version 2>/dev/null; then
            NPM_VERSION=$(npm view @nskha/n8n-nodes-scrappey version 2>/dev/null || echo "0.0.0")
          else
            NPM_VERSION="0.0.0"
          fi
          echo "npm_version=${NPM_VERSION}" >> $GITHUB_OUTPUT
          echo "üì¶ Latest npm version: ${NPM_VERSION}"

          # Get latest version from GitHub packages
          GITHUB_VERSION=""
          if npm view @automations-project/n8n-nodes-scrappey version --registry=https://npm.pkg.github.com 2>/dev/null; then
            GITHUB_VERSION=$(npm view @automations-project/n8n-nodes-scrappey version --registry=https://npm.pkg.github.com 2>/dev/null || echo "0.0.0")
          else
            GITHUB_VERSION="0.0.0"
          fi
          echo "github_version=${GITHUB_VERSION}" >> $GITHUB_OUTPUT
          echo "üì¶ Latest GitHub package version: ${GITHUB_VERSION}"

          # Get latest git tag version
          GIT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo "0.0.0")
          echo "git_version=${GIT_VERSION}" >> $GITHUB_OUTPUT
          echo "üè∑Ô∏è Latest git tag version: ${GIT_VERSION}"

      - name: Determine new version
        id: determine_version
        run: |
          PACKAGE_VERSION="${{ steps.package_version.outputs.version }}"
          NPM_VERSION="${{ steps.published_versions.outputs.npm_version }}"
          GITHUB_VERSION="${{ steps.published_versions.outputs.github_version }}"
          GIT_VERSION="${{ steps.published_versions.outputs.git_version }}"

          echo "Current versions:"
          echo "  Package.json: ${PACKAGE_VERSION}"
          echo "  NPM: ${NPM_VERSION}"
          echo "  GitHub: ${GITHUB_VERSION}"
          echo "  Git: ${GIT_VERSION}"

          # Function to compare versions (returns 0 if v1 > v2, 1 if v1 <= v2)
          version_gt() {
            [ "$(printf '%s\n%s\n' "$2" "$1" | sort -V | head -n1)" != "$1" ]
          }

          # Find the highest PUBLISHED version (exclude git tags - they're just markers)
          HIGHEST_PUBLISHED="0.0.0"
          for ver in "$NPM_VERSION" "$GITHUB_VERSION"; do
            if [ "$ver" != "0.0.0" ] && version_gt "$ver" "$HIGHEST_PUBLISHED"; then
              HIGHEST_PUBLISHED="$ver"
            fi
          done

          echo "üîç Highest published version: ${HIGHEST_PUBLISHED}"

          # Determine version bump type
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.force_version }}" ]; then
            # Manual dispatch with forced version
            NEW_VERSION="${{ github.event.inputs.force_version }}"
            echo "üéØ Using forced version: ${NEW_VERSION}"
          elif [ "${{ github.event_name }}" = "push" ]; then
            # Triggered by tag push
            NEW_VERSION=${GITHUB_REF#refs/tags/v}
            echo "üè∑Ô∏è Using tag version: ${NEW_VERSION}"
          else
            # Auto-determine version bump
            BUMP_TYPE="${{ github.event.inputs.version_type }}"
            if [ "$BUMP_TYPE" = "auto" ]; then
              # Analyze recent commits to determine bump type
              COMMIT_MSG=$(git log -1 --pretty=format:"%s")
              if [[ $COMMIT_MSG =~ \[major\] ]] || [[ $COMMIT_MSG =~ BREAKING[[:space:]]CHANGE ]]; then
                BUMP_TYPE="major"
              elif [[ $COMMIT_MSG =~ \[minor\] ]] || [[ $COMMIT_MSG =~ ^feat ]]; then
                BUMP_TYPE="minor"
              else
                BUMP_TYPE="patch"
              fi
            fi

            # Calculate new version based on highest published version
            IFS='.' read -r major minor patch <<< "$HIGHEST_PUBLISHED"
            case $BUMP_TYPE in
              major)
                NEW_VERSION="$((major + 1)).0.0"
                ;;
              minor)
                NEW_VERSION="${major}.$((minor + 1)).0"
                ;;
              patch)
                NEW_VERSION="${major}.${minor}.$((patch + 1))"
                ;;
            esac
            echo "üìà Auto-bumped ${BUMP_TYPE} version: ${NEW_VERSION}"
          fi

          # Validate new version is higher than all published versions
          SHOULD_RELEASE="true"
          VERSION_CHANGED="true"

          # Check against published versions only (not git tags)
          for ver in "$NPM_VERSION" "$GITHUB_VERSION"; do
            if [ "$ver" != "0.0.0" ] && ! version_gt "$NEW_VERSION" "$ver"; then
              echo "‚ùå New version ${NEW_VERSION} is not higher than published version ${ver}"
              SHOULD_RELEASE="false"
            fi
          done

          # Special case: if this is a manual release and the version already exists,
          # but we want to republish (e.g., failed previous attempt), allow it
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "$SHOULD_RELEASE" = "false" ]; then
            echo "üîÑ Manual release mode - checking if we should allow republishing..."
            # Allow republishing if the new version equals the highest published version
            # but is higher than at least one published source
            if [ "$NEW_VERSION" = "$HIGHEST_PUBLISHED" ]; then
              for ver in "$NPM_VERSION" "$GITHUB_VERSION"; do
                if [ "$ver" != "0.0.0" ] && version_gt "$NEW_VERSION" "$ver"; then
                  echo "‚úÖ Allowing republish: ${NEW_VERSION} > ${ver}"
                  SHOULD_RELEASE="true"
                  break
                fi
              done
            fi
          fi

          # Check if package.json needs updating
          if [ "$PACKAGE_VERSION" = "$NEW_VERSION" ]; then
            VERSION_CHANGED="false"
            echo "‚ÑπÔ∏è Package.json already has the target version"
          fi

          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "should_release=${SHOULD_RELEASE}" >> $GITHUB_OUTPUT
          echo "version_changed=${VERSION_CHANGED}" >> $GITHUB_OUTPUT

          echo "‚úÖ Final decision:"
          echo "  New version: ${NEW_VERSION}"
          echo "  Should release: ${SHOULD_RELEASE}"
          echo "  Version changed: ${VERSION_CHANGED}"

      - name: Update package.json and node.json versions
        if: steps.determine_version.outputs.version_changed == 'true'
        run: |
          NEW_VERSION="${{ steps.determine_version.outputs.new_version }}"

          # Update package.json
          node -e "
            const pkg = require('./package.json');
            pkg.version = '${NEW_VERSION}';
            require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          "
          echo "üìù Updated package.json to version ${NEW_VERSION}"

          # Update node.json if script exists
          if [ -f "scripts/update-node-json.js" ]; then
            node scripts/update-node-json.js
            echo "üìù Updated node.json version"
          fi

      - name: Commit and tag new version
        if: steps.determine_version.outputs.version_changed == 'true' && github.event_name == 'workflow_dispatch'
        run: |
          NEW_VERSION="${{ steps.determine_version.outputs.new_version }}"

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add package.json
          if [ -f "nodes/Scrappey/Scrappey.node.json" ]; then
            git add nodes/Scrappey/Scrappey.node.json
          fi

          git commit -m "chore: bump version to v${NEW_VERSION} [skip ci]" || echo "No changes to commit"

          # Create and push tag
          git tag "v${NEW_VERSION}" || echo "Tag already exists"
          git push origin HEAD || echo "Failed to push commits"
          git push origin "v${NEW_VERSION}" || echo "Failed to push tag"

  build-and-test:
    name: Build and Test for Release
    runs-on: ubuntu-latest
    needs: detect-and-bump-version
    if: needs.detect-and-bump-version.outputs.should_release == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && 'main' || github.ref }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm exec eslint "**/*.{ts,js}" --ignore-path .gitignore

      - name: Auto-format files
        run: pnpm exec prettier --write .

      - name: Type check
        run: pnpm exec tsc --noEmit

      - name: Build project
        run: pnpm run build

      - name: Pack package
        run: pnpm pack

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-package
          path: |
            *.tgz
            dist/
          retention-days: 30

  publish-github:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: [detect-and-bump-version, build-and-test]
    if: needs.detect-and-bump-version.outputs.should_release == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && 'main' || github.ref }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@automations-project'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Update package name and version for GitHub Packages
        run: |
          # Create a backup of original package.json
          cp package.json package.json.backup
          # Update package name and version for GitHub Packages
          node -e "
            const pkg = require('./package.json');
            pkg.name = '@automations-project/n8n-nodes-scrappey';
            pkg.version = '${{ needs.detect-and-bump-version.outputs.new_version }}';
            require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "
          echo "üìù Updated package.json for GitHub Packages: @automations-project/n8n-nodes-scrappey@${{ needs.detect-and-bump-version.outputs.new_version }}"

      - name: Build project
        run: pnpm run build

      - name: Configure npm for GitHub Packages
        run: |
          echo "@automations-project:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}" >> .npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify package configuration
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          EXPECTED_VERSION="${{ needs.detect-and-bump-version.outputs.new_version }}"
          echo "Package name: ${PACKAGE_NAME}"
          echo "Package version: ${PACKAGE_VERSION}"
          echo "Expected version: ${EXPECTED_VERSION}"
          if [ "$PACKAGE_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch!"
            exit 1
          fi
          echo "‚úÖ GitHub package configuration verified"

      - name: Publish to GitHub Packages
        run: pnpm publish --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Restore original package name
        run: mv package.json.backup package.json

  publish-npm:
    name: Publish to NPM Registry
    runs-on: ubuntu-latest
    needs: [detect-and-bump-version, build-and-test]
    if: needs.detect-and-bump-version.outputs.should_release == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && 'main' || github.ref }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Update version in package.json
        run: |
          node -e "
            const pkg = require('./package.json');
            pkg.version = '${{ needs.detect-and-bump-version.outputs.new_version }}';
            require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "
          echo "üìù Updated package.json version to ${{ needs.detect-and-bump-version.outputs.new_version }}"

      - name: Build project
        run: pnpm run build

      - name: Verify package version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          EXPECTED_VERSION="${{ needs.detect-and-bump-version.outputs.new_version }}"
          echo "Package version: ${PACKAGE_VERSION}"
          echo "Expected version: ${EXPECTED_VERSION}"
          if [ "$PACKAGE_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Package has ${PACKAGE_VERSION}, expected ${EXPECTED_VERSION}"
            exit 1
          fi
          echo "‚úÖ Version verified: ${PACKAGE_VERSION}"

      - name: Publish to NPM
        run: pnpm publish --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [detect-and-bump-version, publish-github, publish-npm]
    if: needs.detect-and-bump-version.outputs.should_release == 'true' && github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          NEW_VERSION="v${{ needs.detect-and-bump-version.outputs.new_version }}"
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            CHANGELOG="üéâ Initial release"
          else
            CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"* %s" --no-merges | head -10)
            if [ -z "$CHANGELOG" ]; then
              CHANGELOG="* Minor improvements and bug fixes"
            fi
          fi

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/github-script@v7
        with:
          script: |
            const changelog = `${{ steps.changelog.outputs.changelog }}`;
            const version = '${{ needs.detect-and-bump-version.outputs.new_version }}';

            const releaseBody = `## üöÄ Release v${version}

            ### Changes
            ${changelog}

            ### Installation
            \`\`\`bash
            npm install @nskha/n8n-nodes-scrappey@${version}
            \`\`\`

            Or in n8n: Settings ‚Üí Community Nodes ‚Üí \`@nskha/n8n-nodes-scrappey\``;

            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${version}`,
              name: `v${version}`,
              body: releaseBody,
              draft: false,
              prerelease: false
            });

  notify:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [detect-and-bump-version, publish-github, publish-npm]
    if: always() && needs.detect-and-bump-version.outputs.should_release == 'true'
    steps:
      - name: Success notification
        if: needs.publish-github.result == 'success' && needs.publish-npm.result == 'success'
        run: |
          echo "üéâ Successfully published v${{ needs.detect-and-bump-version.outputs.new_version }}"
          echo "üì¶ Package published to GitHub Packages"
          echo "üì¶ Package published to npm.js"
          echo "üè∑Ô∏è GitHub release created"

      - name: Partial success notification
        if: (needs.publish-github.result == 'success' && needs.publish-npm.result != 'success') || (needs.publish-github.result != 'success' && needs.publish-npm.result == 'success')
        run: |
          echo "‚ö†Ô∏è Partial success for v${{ needs.detect-and-bump-version.outputs.new_version }}"
          echo "GitHub Packages: ${{ needs.publish-github.result }}"
          echo "npm.js: ${{ needs.publish-npm.result }}"

      - name: Failure notification
        if: needs.publish-github.result == 'failure' && needs.publish-npm.result == 'failure'
        run: |
          echo "‚ùå Publishing failed for v${{ needs.detect-and-bump-version.outputs.new_version }}"
          echo "Both GitHub Packages and npm.js publishing failed"
          exit 1

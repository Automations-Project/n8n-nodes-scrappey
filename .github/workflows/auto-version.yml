name: Auto Version & Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'

jobs:
  auto-version:
    name: Auto Version Bump
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[skip version]') }}
    permissions:
      contents: write
      packages: write
      pull-requests: write
      actions: write
    outputs:
      version_bumped: ${{ steps.check_changes.outputs.has_changes }}
      new_version: ${{ steps.new_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '9.1.4'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          # Try frozen lockfile first, regenerate if needed for auto-versioning
          echo "üîç Attempting to install with frozen lockfile..."
          if ! pnpm install --frozen-lockfile; then
            echo "‚ùå Lockfile is outdated. Regenerating lockfile..."
            echo "üìÑ Current lockfile status:"
            ls -la pnpm-lock.yaml || echo "No lockfile found"

            # Clean install to fix lockfile issues
            rm -f pnpm-lock.yaml
            pnpm install

            echo "‚úÖ Lockfile regenerated successfully"
            echo "üìä Lockfile will be committed with version bump"
          else
            echo "‚úÖ Dependencies installed with frozen lockfile"
          fi

      - name: Determine version bump type
        id: version_type
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          echo "Commit message: $COMMIT_MSG"

          if [[ $COMMIT_MSG =~ \[major\] ]] || [[ $COMMIT_MSG =~ BREAKING[[:space:]]CHANGE ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
            echo "üìà Major version bump detected"
          elif [[ $COMMIT_MSG =~ \[minor\] ]] || [[ $COMMIT_MSG =~ ^feat ]] || [[ $COMMIT_MSG =~ ^feat: ]] || [[ $COMMIT_MSG =~ ^feat\( ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
            echo "üìä Minor version bump detected"
          elif [[ $COMMIT_MSG =~ ^fix ]] || [[ $COMMIT_MSG =~ ^fix: ]] || [[ $COMMIT_MSG =~ ^fix\( ]] || [[ $COMMIT_MSG =~ \[patch\] ]]; then
            echo "type=patch" >> $GITHUB_OUTPUT
            echo "üîß Patch version bump detected"
          else
            echo "type=patch" >> $GITHUB_OUTPUT
            echo "üîß Default patch version bump (no specific pattern matched)"
          fi

      - name: Get current version
        id: current_version
        run: |
          CURRENT=$(node -p "require('./package.json').version")
          echo "current=${CURRENT}" >> $GITHUB_OUTPUT
          echo "Current version: ${CURRENT}"

      - name: Bump version
        id: new_version
        run: |
          TYPE="${{ steps.version_type.outputs.type }}"
          NEW_VERSION=$(pnpm version --no-git-tag-version $TYPE --preid='' | sed 's/^v//')
          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "New version: ${NEW_VERSION}"

      - name: Update node.json version
        run: |
          if [ -f "scripts/update-node-json.js" ]; then
            node scripts/update-node-json.js
            echo "üìù Updated node.json version"
          else
            echo "‚ö†Ô∏è scripts/update-node-json.js not found, skipping node.json update"
          fi

      - name: Check for changes
        id: check_changes
        run: |
          # Check if any files have been modified
          if git diff --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes to commit"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected:"
            git diff --name-only
          fi

      - name: Commit version bump
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Add all relevant files that might have changed
          git add package.json

          # Add lockfile if it was updated
          if [[ -n $(git diff --name-only pnpm-lock.yaml) ]]; then
            echo "üì¶ Including updated lockfile in commit"
            git add pnpm-lock.yaml
          fi

          # Add node.json if it exists and was updated
          if [ -f "nodes/Scrappey/Scrappey.node.json" ]; then
            git add nodes/Scrappey/Scrappey.node.json
          fi

          # Commit with comprehensive message
          COMMIT_FILES=$(git diff --cached --name-only | tr '\n' ' ')
          git commit -m "chore: bump version to v${{ steps.new_version.outputs.version }} [skip ci]

          Updated files: ${COMMIT_FILES}

          - Version bumped from ${{ steps.current_version.outputs.current }} to ${{ steps.new_version.outputs.version }}
          - Bump type: ${{ steps.version_type.outputs.type }}"

      - name: Create and push tag
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git tag "v${{ steps.new_version.outputs.version }}"
          git push origin HEAD
          git push origin "v${{ steps.new_version.outputs.version }}"

      - name: Create changelog
        if: steps.check_changes.outputs.has_changes == 'true'
        id: changelog
        run: |
          NEW_VERSION="v${{ steps.new_version.outputs.version }}"
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            CHANGELOG="üéâ Initial release"
          else
            CHANGELOG=$(git log ${PREV_TAG}..HEAD~1 --pretty=format:"* %s" --no-merges | head -10)
            if [ -z "$CHANGELOG" ]; then
              CHANGELOG="* Minor improvements and bug fixes"
            fi
          fi

          # Use EOF delimiter to handle multi-line output safely
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const changelog = `${{ steps.changelog.outputs.changelog }}`;
            const version = '${{ steps.new_version.outputs.version }}';

            const releaseBody = `## üöÄ Release v${version}

            ### Changes
            ${changelog}

            ### Installation
            \`\`\`bash
            npm install @nskha/n8n-nodes-scrappey@${version}
            \`\`\`

            Or in n8n: Settings ‚Üí Community Nodes ‚Üí \`@nskha/n8n-nodes-scrappey\``;

            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${version}`,
              name: `v${version}`,
              body: releaseBody,
              draft: false,
              prerelease: false
            });

      - name: Output summary
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          echo "## üöÄ Auto Version Bump Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous Version**: ${{ steps.current_version.outputs.current }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New Version**: ${{ steps.new_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Bump Type**: ${{ steps.version_type.outputs.type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag Created**: v${{ steps.new_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Changes:" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.changelog.outputs.changelog }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üéØ **GitHub release created automatically**" >> $GITHUB_STEP_SUMMARY

      - name: No changes summary
        if: steps.check_changes.outputs.has_changes == 'false'
        run: |
          echo "## ‚ÑπÔ∏è No Version Bump Required" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "No changes detected that require a version bump." >> $GITHUB_STEP_SUMMARY
          echo "Current version remains: ${{ steps.current_version.outputs.current }}" >> $GITHUB_STEP_SUMMARY

  trigger-release:
    name: Trigger Release Workflow
    runs-on: ubuntu-latest
    needs: auto-version
    if: needs.auto-version.outputs.version_bumped == 'true'
    permissions:
      actions: write
    steps:
      - name: Wait for tag to be available
        run: sleep 15

      - name: Trigger release workflow
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.auto-version.outputs.new_version }}';

            console.log(`üöÄ Triggering release workflow for version ${version}`);

            try {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'release.yml',
                ref: 'main',
                inputs: {
                  version_type: 'patch',
                  force_version: version
                }
              });

              console.log(`‚úÖ Successfully triggered release workflow for version ${version}`);
            } catch (error) {
              console.log(`‚ùå Failed to trigger release workflow: ${error.message}`);

              // Try to find if the release workflow is already running
              try {
                const runs = await github.rest.actions.listWorkflowRuns({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: 'release.yml',
                  status: 'in_progress',
                  per_page: 5
                });

                if (runs.data.workflow_runs.length > 0) {
                  console.log('üîÑ Release workflow is already running, skipping trigger');
                } else {
                  console.log('‚ö†Ô∏è No running release workflow found, but trigger failed');
                }
              } catch (listError) {
                console.log('Could not check workflow status');
              }
            }
